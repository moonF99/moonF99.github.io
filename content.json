{"meta":{"title":"Hexo","subtitle":"","description":"","author":"moonf99","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2023-07-19T11:15:18.000Z","updated":"2023-07-19T11:25:03.627Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-07-19T11:15:30.000Z","updated":"2023-07-19T11:57:33.283Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"I2C总线","slug":"I2C总线","date":"2023-07-20T11:15:49.000Z","updated":"2023-07-20T18:21:12.522Z","comments":true,"path":"2023/07/20/I2C总线/","link":"","permalink":"http://example.com/2023/07/20/I2C%E6%80%BB%E7%BA%BF/","excerpt":"关于I2C总线的一些理解与想法。","text":"关于I2C总线的一些理解与想法。 I2C总线概述I2C总线有两根通信线，分别是SCL(串行时钟总线)，SDA(串行数据总线)。I2C总线还具有同步，半双工，带数据应答的特性，并且有单独的时钟总线，所以可以在上面挂载多个设备。 I2C总线电路规范如下图： 所有I2C设备的SCL连在一起，SDA连在一起，并且均要配置成开漏输出模式。SCL和SDA各添加一个上拉电阻，阻值一般为4.7K左右。开漏输出和上拉电阻的共同作用实现了“线与”的功能，此设计主要是为了解决多机通信互相干扰的问题。 I2C时序结构起始条件和终止条件 起始条件：SCL高电平期间，SDA从高电平切换到低电平。终止条件：SCL高电平期间，SDA从低电平切换到高电平。 1234567891011121314void I2C_Start(void)//起始&#123; I2C_SDA=1; I2C_SCL=1; I2C_SDA=0; I2C_SCL=0;&#125; void I2C_Stop(void)//终止&#123; I2C_SDA=0; I2C_SCL=1; I2C_SDA=1;&#125; 发送一个字节 SCL线从低电平变为高电平，在SCL高电平期间不允许SDA线发生变化。SDA为低电平则读0，高电平则读1。连续循环8次，每次都将一个数据位放在SDA总线上，即可发送一个字节。 12345678910void I2C_SendByte(unsigned char Byte)//字节发送&#123; unsigned char i; for(i=0;i&lt;8;i++) &#123; I2C_SDA=Byte&amp;(0x80&gt;&gt;i); I2C_SCL=1; I2C_SCL=0; &#125;&#125; 接收一个字节 同理发送一个字节，但是主机在接收之前需要释放SDA！ 123456789101112unsigned char I2C_ReceiveByte(void)&#123; unsigned char i,Byte=0x00; I2C_SDA=1; for(i=0;i&lt;8;i++) &#123; I2C_SCL=1; if(I2C_SDA)&#123;Byte|=(0x80&gt;&gt;i);&#125; I2C_SCL=0; &#125; return Byte;&#125; 发送应答与接收应答 发送应答：在接收完一个字节后，主机在下一个时钟发送一位数据，数据0表示应答，数据1表示非应答。接收应答：在发送完一个字节后，主机在下一个时钟接收一位数据，判断从机是否应答，数据0表示应答，数据1表示非应答。(主机在接收之前，需要释放SDA！) 注意：发送应答是主机给从机发送是否应答，主体只会是主机，接收应答是从机给主机发送受否应答，主体只会是从机！ 123456789101112131415161718void I2C_SendAck(unsigned char AckBit)//发送应答 主机向从机发送&#123; I2C_SDA=AckBit; I2C_SCL=1; I2C_SCL=0;&#125; unsigned char I2C_ReCeiveAck(void)//接收应答 主机接收从机&#123; unsigned char AckBit; I2C_SDA=1;//此处的SDA是主机松手置高电平 I2C_SCL=1; AckBit=I2C_SDA;//从机若应答则置0 不应答则置1 I2C_SCL=0; return AckBit;&#125; I2C数据帧发送一帧数据 流程：开始发送-&gt;从机地址-&gt;接收应答-&gt;数据位1-&gt;接收应答-&gt;数据位2-&gt;接收应答-&gt;…数据位n-&gt;接收应答-&gt;停止发送其中从机地址由七位数据位+一位读写位组成。 接收一帧数据 流程：同上 复合格式 开始发送-&gt;从机地址-&gt;接收应答-&gt;数据位1-&gt;接收应答-&gt;数据位2-&gt;接收应答-&gt;…数据位n-&gt;接收应答-&gt;开始发送-&gt;从机地址-&gt;接收应答-&gt;数据位1-&gt;发送应答-&gt;数据位2-&gt;发送应答-&gt;…数据位n-&gt;不发送应答-&gt;停止发送 AT24C02数据帧字节写：在WORD ADDRESS处写入数据DATA注意：AT24C02的固定地址为1010，可配置地址本开发板上为000所以SLAVE ADDRESS+W为0xA0，SLAVE ADDRESS+R为0xA1 12345678910111213#define AT24C02_ADDRESS 0xA0void AT24C02_WriteByte(unsigned char WordAddress,Data)&#123; unsigned char Ack; I2C_Start(); I2C_SendByte(AT24C02_ADDRESS); I2C_ReceiveAck(); I2C_SendByte(WordAddress); I2C_ReceiveAck(); I2C_SendByte(Data); I2C_ReceiveAck(); I2C_Stop();&#125; 随机读：读出在WORD ADDRESS处的数据DATA 1234567891011121314151617unsigned char AT24C02_ReadByte(unsigned char WordAddress)&#123; unsigned char Data; I2C_Start(); I2C_SendByte(AT24C02_ADDRESS); I2C_ReceiveAck(); I2C_SendByte(WordAddress); I2C_ReceiveAck(); I2C_Start(); I2C_SendByte(AT24C02_ADDRESS|0x01); I2C_ReceiveAck(); Data=I2C_ReCeiveByte(); I2C_SendAck(1); I2C_Stop(); return Data;&#125; 食用例AT24C02数据存储按下键码1Num+1，按下键码2Num-1，按下键码3存储当前Num，按下键码4显示存储的Num。 123456789101112131415161718192021222324252627282930313233343536373839404142unsigned char KeyNum;unsigned int Num;void main()&#123; LCD_Init(); LCD_ShowNum(1,1,Num,5); while(1) &#123; KeyNum=Key(); if(KeyNum==1) &#123; Num++; LCD_ShowNum(1,1,Num,5); &#125; if(KeyNum==2) &#123; Num--; LCD_ShowNum(1,1,Num,5); &#125; if(KeyNum==3) &#123; AT24C02_WriteByte(0,Num%256);//整型数据2个字节 字符型数据1个字节 Delay(5); AT24C02_WriteByte(1,Num/256); Delay(5); LCD_ShowString(2,1,&quot;Write OK&quot;); Delay(1000); LCD_ShowString(2,1,&quot; &quot;); &#125; if(KeyNum==4) &#123; Num=AT24C02_ReadByte(0);//将0地址的8位数据放在Num的低8位 Num|=AT24C02_ReadByte(1)&lt;&lt;8;//将1地址的8位数据左移，放在Num的高8位 LCD_ShowNum(1,1,Num,5); LCD_ShowString(2,1,&quot;Read OK&quot;); Delay(1000); LCD_ShowString(2,1,&quot; &quot;); &#125; &#125;&#125; 最后放一点我的感想：江科大我的神！没有他的教程也就没有这篇博客，新人入坑嵌入式可以去看他的教程，这里放上他的B站链接，哪里不懂多看几遍就懂了。","categories":[{"name":"AT89C52","slug":"AT89C52","permalink":"http://example.com/categories/AT89C52/"}],"tags":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"}]},{"title":"tags标签测试","slug":"tags标签测试","date":"2023-07-19T11:58:34.000Z","updated":"2023-07-19T11:59:24.651Z","comments":true,"path":"2023/07/19/tags标签测试/","link":"","permalink":"http://example.com/2023/07/19/tags%E6%A0%87%E7%AD%BE%E6%B5%8B%E8%AF%95/","excerpt":"","text":"fine","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]},{"title":"标签与分类","slug":"标签与分类","date":"2023-07-19T11:18:11.000Z","updated":"2023-07-19T11:27:08.129Z","comments":true,"path":"2023/07/19/标签与分类/","link":"","permalink":"http://example.com/2023/07/19/%E6%A0%87%E7%AD%BE%E4%B8%8E%E5%88%86%E7%B1%BB/","excerpt":"","text":"fine","categories":[{"name":"test","slug":"test","permalink":"http://example.com/categories/test/"}],"tags":[]},{"title":"23719","slug":"23-7-19","date":"2023-07-19T07:33:16.000Z","updated":"2023-07-19T07:35:34.819Z","comments":true,"path":"2023/07/19/23-7-19/","link":"","permalink":"http://example.com/2023/07/19/23-7-19/","excerpt":"","text":"这是一篇2023年7月19日创建的文章。 对博客进行测试的文章。 test tset","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-07-18T13:26:18.470Z","updated":"2023-07-17T11:02:56.095Z","comments":true,"path":"2023/07/18/hello-world/","link":"","permalink":"http://example.com/2023/07/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"23718","slug":"23-7-18","date":"2023-07-18T10:45:09.000Z","updated":"2023-07-18T10:50:18.015Z","comments":true,"path":"2023/07/18/23-7-18/","link":"","permalink":"http://example.com/2023/07/18/23-7-18/","excerpt":"","text":"test test test test test __test _test _","categories":[],"tags":[]},{"title":"第一篇文章","slug":"第一篇文章","date":"2023-07-17T11:07:36.000Z","updated":"2023-07-19T11:17:46.701Z","comments":true,"path":"2023/07/17/第一篇文章/","link":"","permalink":"http://example.com/2023/07/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/","excerpt":"","text":"fine","categories":[],"tags":[]}],"categories":[{"name":"AT89C52","slug":"AT89C52","permalink":"http://example.com/categories/AT89C52/"},{"name":"test","slug":"test","permalink":"http://example.com/categories/test/"}],"tags":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]}